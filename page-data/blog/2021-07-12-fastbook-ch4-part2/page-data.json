{"componentChunkName":"component---src-components-blog-layout-js","path":"/blog/2021-07-12-fastbook-ch4-part2/","result":{"data":{"mdx":{"id":"4834892a-4d9c-541b-b032-14dd1b06c0f3","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Reading Notes - Ch. 4 - Fastbook (part 2)\",\n  \"date\": \"2021-07-12T00:00:00.000Z\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"Gradient Descent\"), mdx(\"p\", null, \"Recall: Arthur Samuel's description of machine learning\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \" Suppose we arrange for some automatic means of testing the effectiveness of any current weight assignment in terms of actual performance and provide a mechanism for altering the weight assignment so as to maximize the performance. We need not go into the details of such a procedure to see that it could be made entirely automatic and to see that a machine so programmed would \\u201Clearn\\u201D from its experience.\")), mdx(\"p\", null, \"Gradient descent is the \\\"mechanism\\\" that we use to alter the weight assignment (i.e. parameters of our model) so that we can maximize its performance (i.e. minimize the loss value).\"), mdx(\"p\", null, \"The following diagram shows the different components involved in training a deep learning model:\"), mdx(Image, {\n    name: \"dl-tr.png\",\n    mdxType: \"Image\"\n  }), mdx(\"p\", null, \"In this setup, we can use calculus to calculate how we should update the parameters of the model so that the loss value decreases. This change we have to make in the parameters of the model is given by the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"gradient\"), \" of the loss function with respect to the parameters.\"), mdx(\"p\", null, \"Technically, the gradient specifies the direction of steepest \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"increase\"), \" of the loss function. So we update the parameters in the negative direction of the gradient - i.e. the steepest \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"decrease\"), \".\"), mdx(Image, {\n    name: \"gd.png\",\n    mdxType: \"Image\"\n  }), mdx(\"p\", null, \"After finding the gradient, we adjust the parameters of the model in the direction specified by the gradient to reduce the loss value, hence the name \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"gradient descent\"), \".\"), mdx(Image, {\n    name: \"gd-flowchart.png\",\n    mdxType: \"Image\"\n  }), mdx(\"p\", null, \"We have a way of improving the weights using gradient descent so it's completely fine to start with randomly initialized weights.\"), mdx(\"p\", null, \"We stop training the model when we see that the accuracy of the model starts getting worse or we run out of time.\"), mdx(\"h2\", null, \"Batch, Mini-batch and Stochastic Gradient Descent\"), mdx(\"p\", null, \"When calculating the gradient of the loss function with respect to the model parameters, at each step you can use all the data in the training set (batch gradient descent), one data point from the training set (stochastic gradient descent), or a subset of data (i.e. a mini-batch) in the training set (mini-batch gradient descent).\"), mdx(\"p\", null, \"Batch gradient descent gives the most accurate gradient. However, computing the gradient over the entire dataset takes a long time. Also, it may not be possible to fit all your data in memory (especially a GPU) to use batch gradient descent if you have a very large dataset.\"), mdx(\"p\", null, \"Stochastic gradient descent is the fastest since the gradient has to be calculated using only one point. However, it gives a very imprecise and unstable gradient. Also, using one data point at a time doesn't allow you to make full use of the parallel processing capabilities of a GPU.\"), mdx(\"p\", null, \"Mini-batch gradient descent is a compromise between batch and stochastic gradient descent. A larger batch size (number of items in a mini-batch) gives a more accurate and stable estimate of the gradient, however smaller batches are faster to compute and allows you to update the gradient more number of times in an epoch.\"), mdx(\"p\", null, \"Note: randomly shuffling items in mini-batches after every epoch can result in better generalization.\"), mdx(\"h2\", null, \"Learning Rate\"), mdx(\"p\", null, \"The learning rate determines how big of a step we take when updating the weights. If it is too small, you will have to train the model for longer to reach the minima of the loss function. However, if it is too high then the loss will keep overshooting the minima. In fact, if the learning rate is sufficiently high, the loss can even start increasing.\"), mdx(\"p\", null, \"The learning rate is used to control the weight update as follows:\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"New parameters = Old parameters - (gradient x learning rate)\")), mdx(\"h2\", null, \"The Loss Function\"), mdx(\"p\", null, \"The choice of loss function is important for the gradient descent process to work. The loss function needs to update even when we make slight adjustments to our model parameters.\"), mdx(\"p\", null, \"This is why accuracy is not a good choice for a loss function. If we change our weights a little bit, the output of the model may not change significantly and therefore its accuracy may not change. This will result in a gradient value of zero and our model won't be able to learn at that step.\"), mdx(\"h2\", null, \"Nonlinearities\"), mdx(\"p\", null, \"A linear classifier is one whose output is a function of the linear combination of the model's parameters and input features. Adding multiple linear layers one after another can't improve the performance of a model because multiple linear layers, one after another, are equivalent to a single linear layer (with different parameters).\"), mdx(\"p\", null, \"Adding a nonlinearity (also called an \\\"activation function\\\") between linear layers decouples the layers and enables each layer to learn on its own.\"), mdx(\"p\", null, \"Two examples of nonlinearities are the ReLU and Sigmoid functions\"), mdx(Image, {\n    name: \"non-linearities.png\",\n    mdxType: \"Image\"\n  }), mdx(\"h2\", null, \"The Universal Approximation Theorem\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"For any arbitrarily wiggly function, we can approximate it as a bunch of lines joined together; to make it close to the wiggly function, we just have to use shorter lines.\")), mdx(\"h2\", null, \"Deeper Models\"), mdx(\"p\", null, \"We can build deep models using multiple linear layers with a nonlinearity between them. However, the deeper a model gets, the harder it is to optimize its parameters in practice.\"), mdx(\"p\", null, \"The advantage of using deep models is that you can use a deeper model with fewer parameters to get the same performance as a shallower model with more parameters.\"), mdx(\"p\", null, \"As a result, deeper models can be trained faster and using less memory.\"));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Reading Notes - Ch. 4 - Fastbook (part 2)"}}},"pageContext":{"id":"4834892a-4d9c-541b-b032-14dd1b06c0f3"}},"staticQueryHashes":["3069025275","63159454"]}