{"componentChunkName":"component---src-components-blog-layout-js","path":"/blog/2021-04-21-base64-encoding/","result":{"data":{"mdx":{"id":"58e2c3ca-c049-5b49-b9ee-4bf154bb6e05","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"How Base64 Encoding Works\",\n  \"date\": \"2021-04-21T00:00:00.000Z\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Base64 encoding is used to convert a \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"sequence of bits\"), \" to a \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"sequence of alphanumeric characters\"), \".\"), mdx(Image, {\n    name: \"base64-bin-to-chars.png\",\n    mdxType: \"Image\"\n  }), mdx(\"p\", null, \"There are 64 possible values that each encoded character can take, hence the name \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"base64\"), \" encoding: 26 lowercase letter, 26 uppercase letters, 10 numbers, and the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"+\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/\"), \" characters.\"), mdx(\"p\", null, \"Actually, there is an extra character used for padding (the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"=\"), \" character). So technically, a 65-character set is used for base64 encoding.\"), mdx(\"h2\", null, \"How it works\"), mdx(\"p\", null, \"Since the base 64 character set has 64 characters (excluding the padding character), we need 6 bits to represent each character.\"), mdx(\"p\", null, \"Since most computers deal with bytes (8 bits), we take 3 bytes at a time (24 bits) and break them down in a sequence of four 6 bit characters. We can then use a character from the base 64 alphabet to represent each group of 6 bits.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"\\nTable 1: The Base 64 Alphabet\\n\\n Value Encoding  Value Encoding  Value Encoding  Value Encoding\\n     0 A            17 R            34 i            51 z\\n     1 B            18 S            35 j            52 0\\n     2 C            19 T            36 k            53 1\\n     3 D            20 U            37 l            54 2\\n     4 E            21 V            38 m            55 3\\n     5 F            22 W            39 n            56 4\\n     6 G            23 X            40 o            57 5\\n     7 H            24 Y            41 p            58 6\\n     8 I            25 Z            42 q            59 7\\n     9 J            26 a            43 r            60 8\\n    10 K            27 b            44 s            61 9\\n    11 L            28 c            45 t            62 +\\n    12 M            29 d            46 u            63 /\\n    13 N            30 e            47 v\\n    14 O            31 f            48 w         (pad) =\\n    15 P            32 g            49 x\\n    16 Q            33 h            50 y\\n\\n\")), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Source: \", mdx(\"a\", _extends({\n    parentName: \"em\"\n  }, {\n    \"href\": \"https://tools.ietf.org/search/rfc4648\"\n  }), \"https://tools.ietf.org/search/rfc4648\"))), mdx(\"h2\", null, \"Example\"), mdx(\"p\", null, \"Let's say we want to encode the word \\\"foo\\\".\"), mdx(\"p\", null, \"First, we need to convert this string to a sequence of bits. For simplicity, let's convert each character into the binary representation of its corresponding ASCII value:\"), mdx(\"p\", null, \"foo = \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"01100110 01101111 01101111\")), mdx(\"p\", null, \"We then take this sequence of 3 bytes and break it down into a sequence of four 6-bit groups:\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"011001 | 10 0110 | 1111 01 | 101111\")), mdx(\"p\", null, \"We then convert each 6-bit group into the corresponding printable character from the base 64 alphabet. Therefore, the base64 encoded representation of \\\"foo\\\" is: Zm9v\"), mdx(\"p\", null, \"Since base64 encoding works on any sequence of bits, it can be used to encode non-textual data like images as well.\"), mdx(\"h2\", null, \"The padding token\"), mdx(\"p\", null, \"When processing a sequence of bits in groups of 3 bytes, it is possible that the last sequence does not contain all 3 bytes. In this case, the sequence is padded with 0s to make the number of bits a multiple of 6.\"), mdx(\"p\", null, \"If the last sequence has only 2 bytes, the base64 encoded output will be 3 characters from the base 64 alphabet followed by the\\xA0\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"=\"), \"\\xA0character to signify padding.\"), mdx(\"p\", null, \"If the last sequence has only 1 byte, the base64 encoded output will have 2 characters from the base 64 alphabet followed by\\xA0\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"==\"), \"\\xA0to signify padding.\"));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"How Base64 Encoding Works"}}},"pageContext":{"id":"58e2c3ca-c049-5b49-b9ee-4bf154bb6e05"}},"staticQueryHashes":["3069025275","63159454"]}