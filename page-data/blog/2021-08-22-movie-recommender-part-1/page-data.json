{"componentChunkName":"component---src-components-jupyter-blog-layout-js","path":"/blog/2021-08-22-movie-recommender-part-1/","result":{"data":{"jupyterNotebook":{"id":"1123c531-285e-5b16-b026-56f7c336d37f >>> JupyterNotebook","html":"<div class=\"notebook-render\"><div class=\"sc-ifAKCX zMCZx\"><div class=\"sc-bxivhb HLmih cell\" style=\"box-shadow:none\"><div class=\"sc-iwsKbI exQuEV markdown\"><h1>Building a Movie Recommender - Part 1</h1>\n<h2>An Introduction to Collaborative Filtering</h2>\n<p>Collaborative filtering is a technique used by recommendation engines to recommend items to users, e.g. products on Amazon and movies/series on Netflix.</p>\n<p><img src=\"/rec-nf.png\"/></p>\n<p><em>Recommendations from Netflix based on my viewing history</em></p>\n<p>The basic idea behind collaborative filtering is the following:</p>\n<ol>\n<li>Consider the items that the current user has liked</li>\n<li>Find other users that have liked similar items</li>\n<li>Recommend items those users have liked</li>\n</ol>\n<p>In this 3-part series of posts, we will create our own movie recommendation system:</p>\n<ol>\n<li>Part 1 (this post) - we will train a model capable of recommending movies to users</li>\n<li><a href=\"https://ravimashru.dev/blog/2021-08-24-movie-recommender-part-2/\">Part 2</a> - we will build a system to recommend movies to new users</li>\n<li>Part 3 - we will create an API and UI for our system and deploy them</li>\n</ol>\n<h2>The MovieLens Dataset</h2>\n<p>The MovieLens dataset contains millions of ratings of movies. For simplicity, we&#x27;ll use a subset of this dataset that contains 100,000 ratings to build a model.</p></div></div><div class=\"sc-bxivhb HLmih cell\" style=\"box-shadow:none\"><div class=\"sc-gzVnrw iiEGBE input-container\"><pre class=\"sc-bZQynM dQAqiJ input\" style=\"color:#393A34;font-family:&quot;Consolas&quot;, &quot;Bitstream Vera Sans Mono&quot;, &quot;Courier New&quot;, Courier, monospace;direction:ltr;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;font-size:.9em;line-height:1.2em;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;padding:10px 0px 10px 10px;margin:0px;overflow:auto;border:none;background-color:var(--cm-background, #fafafa)\"><code class=\"language-python\" style=\"color:#393A34;font-family:&quot;Consolas&quot;, &quot;Bitstream Vera Sans Mono&quot;, &quot;Courier New&quot;, Courier, monospace;direction:ltr;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;font-size:.9em;line-height:1.2em;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none\"><span class=\"token\" style=\"color:#0000ff\">from</span><span> fastai</span><span class=\"token\" style=\"color:#393A34\">.</span><span>tabular</span><span class=\"token\" style=\"color:#393A34\">.</span><span class=\"token builtin\">all</span><span> </span><span class=\"token\" style=\"color:#0000ff\">import</span><span> </span><span class=\"token\" style=\"color:#393A34\">*</span><span>\n</span><span>path </span><span class=\"token\" style=\"color:#393A34\">=</span><span> untar_data</span><span class=\"token\" style=\"color:#393A34\">(</span><span>URLs</span><span class=\"token\" style=\"color:#393A34\">.</span><span>ML_100k</span><span class=\"token\" style=\"color:#393A34\">)</span><span>\n</span>\n<span>ratings </span><span class=\"token\" style=\"color:#393A34\">=</span><span> pd</span><span class=\"token\" style=\"color:#393A34\">.</span><span>read_csv</span><span class=\"token\" style=\"color:#393A34\">(</span><span>path</span><span class=\"token\" style=\"color:#393A34\">/</span><span class=\"token\" style=\"color:#A31515\">&#x27;u.data&#x27;</span><span class=\"token\" style=\"color:#393A34\">,</span><span> delimiter</span><span class=\"token\" style=\"color:#393A34\">=</span><span class=\"token\" style=\"color:#A31515\">&#x27;\\t&#x27;</span><span class=\"token\" style=\"color:#393A34\">,</span><span> header</span><span class=\"token\" style=\"color:#393A34\">=</span><span class=\"token\" style=\"color:#36acaa\">None</span><span class=\"token\" style=\"color:#393A34\">,</span><span> names</span><span class=\"token\" style=\"color:#393A34\">=</span><span class=\"token\" style=\"color:#393A34\">[</span><span class=\"token\" style=\"color:#A31515\">&#x27;user&#x27;</span><span class=\"token\" style=\"color:#393A34\">,</span><span class=\"token\" style=\"color:#A31515\">&#x27;movie&#x27;</span><span class=\"token\" style=\"color:#393A34\">,</span><span class=\"token\" style=\"color:#A31515\">&#x27;rating&#x27;</span><span class=\"token\" style=\"color:#393A34\">,</span><span class=\"token\" style=\"color:#A31515\">&#x27;timestamp&#x27;</span><span class=\"token\" style=\"color:#393A34\">]</span><span class=\"token\" style=\"color:#393A34\">)</span><span>\n</span><span>ratings</span><span class=\"token\" style=\"color:#393A34\">.</span><span>head</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#393A34\">)</span></code></pre></div><div class=\"sc-htoDjs fWFfJb nteract-outputs\" style=\"max-height:100%\"><div class=\"cell_display\" style=\"max-height:100%;overflow-y:auto\"><div><div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>user</th>\n      <th>movie</th>\n      <th>rating</th>\n      <th>timestamp</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>196</td>\n      <td>242</td>\n      <td>3</td>\n      <td>881250949</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>186</td>\n      <td>302</td>\n      <td>3</td>\n      <td>891717742</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>22</td>\n      <td>377</td>\n      <td>1</td>\n      <td>878887116</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>244</td>\n      <td>51</td>\n      <td>2</td>\n      <td>880606923</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>166</td>\n      <td>346</td>\n      <td>1</td>\n      <td>886397596</td>\n    </tr>\n  </tbody>\n</table>\n</div></div></div></div></div><div class=\"sc-bxivhb HLmih cell\" style=\"box-shadow:none\"><div class=\"sc-iwsKbI exQuEV markdown\"><p>Each row in this dataset is the rating a user has given to a particular movie. We need to build a model that will predict the rating a user will give to a movie they haven&#x27;t watched.</p>\n<p>Another way to view this data is by cross-tabulating it - making a table where the rows represent users and columns represent movies.</p></div></div><div class=\"sc-bxivhb HLmih cell\" style=\"box-shadow:none\"><div class=\"sc-gzVnrw iiEGBE input-container\"><pre class=\"sc-bZQynM dQAqiJ input\" style=\"color:#393A34;font-family:&quot;Consolas&quot;, &quot;Bitstream Vera Sans Mono&quot;, &quot;Courier New&quot;, Courier, monospace;direction:ltr;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;font-size:.9em;line-height:1.2em;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;padding:10px 0px 10px 10px;margin:0px;overflow:auto;border:none;background-color:var(--cm-background, #fafafa)\"><code class=\"language-python\" style=\"color:#393A34;font-family:&quot;Consolas&quot;, &quot;Bitstream Vera Sans Mono&quot;, &quot;Courier New&quot;, Courier, monospace;direction:ltr;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;font-size:.9em;line-height:1.2em;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none\"><span>pd</span><span class=\"token\" style=\"color:#393A34\">.</span><span>crosstab</span><span class=\"token\" style=\"color:#393A34\">(</span><span>ratings</span><span class=\"token\" style=\"color:#393A34\">.</span><span>user</span><span class=\"token\" style=\"color:#393A34\">,</span><span> ratings</span><span class=\"token\" style=\"color:#393A34\">.</span><span>movie</span><span class=\"token\" style=\"color:#393A34\">,</span><span> values</span><span class=\"token\" style=\"color:#393A34\">=</span><span>ratings</span><span class=\"token\" style=\"color:#393A34\">.</span><span>rating</span><span class=\"token\" style=\"color:#393A34\">,</span><span> aggfunc</span><span class=\"token\" style=\"color:#393A34\">=</span><span class=\"token\" style=\"color:#A31515\">&#x27;sum&#x27;</span><span class=\"token\" style=\"color:#393A34\">)</span></code></pre></div><div class=\"sc-htoDjs fWFfJb nteract-outputs\" style=\"max-height:100%\"><div class=\"cell_display\" style=\"max-height:100%;overflow-y:auto\"><div><div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th>movie</th>\n      <th>1</th>\n      <th>2</th>\n      <th>3</th>\n      <th>4</th>\n      <th>5</th>\n      <th>6</th>\n      <th>7</th>\n      <th>8</th>\n      <th>9</th>\n      <th>10</th>\n      <th>...</th>\n      <th>1673</th>\n      <th>1674</th>\n      <th>1675</th>\n      <th>1676</th>\n      <th>1677</th>\n      <th>1678</th>\n      <th>1679</th>\n      <th>1680</th>\n      <th>1681</th>\n      <th>1682</th>\n    </tr>\n    <tr>\n      <th>user</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td>5.0</td>\n      <td>3.0</td>\n      <td>4.0</td>\n      <td>3.0</td>\n      <td>3.0</td>\n      <td>5.0</td>\n      <td>4.0</td>\n      <td>1.0</td>\n      <td>5.0</td>\n      <td>3.0</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>4.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>2.0</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>4.0</td>\n      <td>3.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>939</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>5.0</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>940</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>2.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>4.0</td>\n      <td>5.0</td>\n      <td>3.0</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>941</th>\n      <td>5.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>4.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>942</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>943</th>\n      <td>NaN</td>\n      <td>5.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>3.0</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n<p>943 rows × 1682 columns</p>\n</div></div></div></div></div><div class=\"sc-bxivhb HLmih cell\" style=\"box-shadow:none\"><div class=\"sc-iwsKbI exQuEV markdown\"><p>In this view of the data, we need to predict all the missing values (shown as <code>NaN</code>).</p>\n<p>If we had properties to describe each movie, for example the genre and we also knew how much each user liked each genre, our job would be very easy. We could just recommend movies that the user hasn&#x27;t watched but would like because of their genre preference.</p>\n<p><img src=\"/rec-user-movie.png\"/></p>\n<p>However, we don&#x27;t have this kind of information about the movies or users. The only thing we know is how much each user liked the movies they rated.</p>\n<p>What we can do is create vectors (with randomly initialized values) for each user and movie. Then, instead of trying to determine what each component of the vector means, we can then use the data available to use to <strong>learn</strong> what the values of these vectors should be using <strong><a href=\"https://ravimashru.dev/blog/2021-07-12-fastbook-ch4-part2/\">gradient descent</a></strong>.</p>\n<p>Such vectors are also commonly known as <strong>latent factors</strong> or <strong>embeddings</strong>.</p></div></div><div class=\"sc-bxivhb HLmih cell\" style=\"box-shadow:none\"><div class=\"sc-iwsKbI exQuEV markdown\"><h2>Learning representations of movies and users</h2>\n<p>In general, gradient descent works as follows:</p>\n<p><strong>Step 1: Initialize parameters</strong></p>\n<p>In this case, the vectors for our users and movies are the parameters that we initialize with random values.</p>\n<p><strong>Step 2: Calculate predictions</strong></p>\n<p>We need to predict the rating a user gives to a movie they have watched. A straightforward way to calculate these predictions from the user and movie vectors is using the dot product.</p>\n<p>This requires the vectors that represent users and movies to be of the same size. It is possible to use vectors of a different length for movies and a different length for users if we use a neural network instead of a dot product. We will look at this approach later in this post.</p>\n<p><strong>Step 3: Calculate the loss</strong></p>\n<p>The value of the loss tells us how far away our model&#x27;s predictions are from the actual ratings provided by the user. Typically, a high loss value is bad and the objective of the gradient descent process is the iteratively minimize the loss value.</p>\n<p>This difference between the actual rating value and the model&#x27;s prediction is also known as the mean absolute error. Another way to calculate the loss would be using the mean squared error.</p>\n<p><strong>Step 4: Optimize parameters</strong></p>\n<p>The final step in the process is to update the user and movie vectors such that the loss is minimized.</p>\n<p><img src=\"/rec-gd.png\"/></p>\n<h2>Building a model</h2>\n<p>Building a collaborative filtering model using the fastai library is extremely easy using the <code>fastai.collab</code> module.</p>\n<p>But first, let us add names of the movies to our data so that since they are easier to understand compared to the IDs.</p></div></div><div class=\"sc-bxivhb HLmih cell\" style=\"box-shadow:none\"><div class=\"sc-gzVnrw iiEGBE input-container\"><pre class=\"sc-bZQynM dQAqiJ input\" style=\"color:#393A34;font-family:&quot;Consolas&quot;, &quot;Bitstream Vera Sans Mono&quot;, &quot;Courier New&quot;, Courier, monospace;direction:ltr;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;font-size:.9em;line-height:1.2em;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;padding:10px 0px 10px 10px;margin:0px;overflow:auto;border:none;background-color:var(--cm-background, #fafafa)\"><code class=\"language-python\" style=\"color:#393A34;font-family:&quot;Consolas&quot;, &quot;Bitstream Vera Sans Mono&quot;, &quot;Courier New&quot;, Courier, monospace;direction:ltr;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;font-size:.9em;line-height:1.2em;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none\"><span>movies </span><span class=\"token\" style=\"color:#393A34\">=</span><span> pd</span><span class=\"token\" style=\"color:#393A34\">.</span><span>read_csv</span><span class=\"token\" style=\"color:#393A34\">(</span><span>path</span><span class=\"token\" style=\"color:#393A34\">/</span><span class=\"token\" style=\"color:#A31515\">&#x27;u.item&#x27;</span><span class=\"token\" style=\"color:#393A34\">,</span><span>  delimiter</span><span class=\"token\" style=\"color:#393A34\">=</span><span class=\"token\" style=\"color:#A31515\">&#x27;|&#x27;</span><span class=\"token\" style=\"color:#393A34\">,</span><span> encoding</span><span class=\"token\" style=\"color:#393A34\">=</span><span class=\"token\" style=\"color:#A31515\">&#x27;latin-1&#x27;</span><span class=\"token\" style=\"color:#393A34\">,</span><span>\n</span><span>                         usecols</span><span class=\"token\" style=\"color:#393A34\">=</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#36acaa\">0</span><span class=\"token\" style=\"color:#393A34\">,</span><span class=\"token\" style=\"color:#36acaa\">1</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">,</span><span> names</span><span class=\"token\" style=\"color:#393A34\">=</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#A31515\">&#x27;movie&#x27;</span><span class=\"token\" style=\"color:#393A34\">,</span><span class=\"token\" style=\"color:#A31515\">&#x27;title&#x27;</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">,</span><span> header</span><span class=\"token\" style=\"color:#393A34\">=</span><span class=\"token\" style=\"color:#36acaa\">None</span><span class=\"token\" style=\"color:#393A34\">)</span><span>\n</span><span>ratings </span><span class=\"token\" style=\"color:#393A34\">=</span><span> ratings</span><span class=\"token\" style=\"color:#393A34\">.</span><span>merge</span><span class=\"token\" style=\"color:#393A34\">(</span><span>movies</span><span class=\"token\" style=\"color:#393A34\">)</span><span>\n</span><span>ratings</span><span class=\"token\" style=\"color:#393A34\">.</span><span>head</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#393A34\">)</span></code></pre></div><div class=\"sc-htoDjs fWFfJb nteract-outputs\" style=\"max-height:100%\"><div class=\"cell_display\" style=\"max-height:100%;overflow-y:auto\"><div><div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>user</th>\n      <th>movie</th>\n      <th>rating</th>\n      <th>timestamp</th>\n      <th>title</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>196</td>\n      <td>242</td>\n      <td>3</td>\n      <td>881250949</td>\n      <td>Kolya (1996)</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>63</td>\n      <td>242</td>\n      <td>3</td>\n      <td>875747190</td>\n      <td>Kolya (1996)</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>226</td>\n      <td>242</td>\n      <td>5</td>\n      <td>883888671</td>\n      <td>Kolya (1996)</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>154</td>\n      <td>242</td>\n      <td>3</td>\n      <td>879138235</td>\n      <td>Kolya (1996)</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>306</td>\n      <td>242</td>\n      <td>5</td>\n      <td>876503793</td>\n      <td>Kolya (1996)</td>\n    </tr>\n  </tbody>\n</table>\n</div></div></div></div></div><div class=\"sc-bxivhb HLmih cell\" style=\"box-shadow:none\"><div class=\"sc-iwsKbI exQuEV markdown\"><p>Then, we need to create DataLoaders for our data.</p></div></div><div class=\"sc-bxivhb HLmih cell\" style=\"box-shadow:none\"><div class=\"sc-gzVnrw iiEGBE input-container\"><pre class=\"sc-bZQynM dQAqiJ input\" style=\"color:#393A34;font-family:&quot;Consolas&quot;, &quot;Bitstream Vera Sans Mono&quot;, &quot;Courier New&quot;, Courier, monospace;direction:ltr;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;font-size:.9em;line-height:1.2em;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;padding:10px 0px 10px 10px;margin:0px;overflow:auto;border:none;background-color:var(--cm-background, #fafafa)\"><code class=\"language-python\" style=\"color:#393A34;font-family:&quot;Consolas&quot;, &quot;Bitstream Vera Sans Mono&quot;, &quot;Courier New&quot;, Courier, monospace;direction:ltr;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;font-size:.9em;line-height:1.2em;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none\"><span class=\"token\" style=\"color:#0000ff\">from</span><span> fastai</span><span class=\"token\" style=\"color:#393A34\">.</span><span>collab </span><span class=\"token\" style=\"color:#0000ff\">import</span><span> </span><span class=\"token\" style=\"color:#393A34\">*</span><span>\n</span>\n<span>dls </span><span class=\"token\" style=\"color:#393A34\">=</span><span> CollabDataLoaders</span><span class=\"token\" style=\"color:#393A34\">.</span><span>from_df</span><span class=\"token\" style=\"color:#393A34\">(</span><span>ratings</span><span class=\"token\" style=\"color:#393A34\">,</span><span> item_name</span><span class=\"token\" style=\"color:#393A34\">=</span><span class=\"token\" style=\"color:#A31515\">&#x27;title&#x27;</span><span class=\"token\" style=\"color:#393A34\">,</span><span> bs</span><span class=\"token\" style=\"color:#393A34\">=</span><span class=\"token\" style=\"color:#36acaa\">64</span><span class=\"token\" style=\"color:#393A34\">)</span><span>\n</span><span>dls</span><span class=\"token\" style=\"color:#393A34\">.</span><span>show_batch</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#393A34\">)</span></code></pre></div><div class=\"sc-htoDjs fWFfJb nteract-outputs\" style=\"max-height:100%\"><div class=\"cell_display\" style=\"max-height:100%;overflow-y:auto\"><div><table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>user</th>\n      <th>title</th>\n      <th>rating</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>113</td>\n      <td>Twelve Monkeys (1995)</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>181</td>\n      <td>Chasing Amy (1997)</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>90</td>\n      <td>Eat Drink Man Woman (1994)</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>506</td>\n      <td>Tombstone (1993)</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>189</td>\n      <td>Citizen Kane (1941)</td>\n      <td>5</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>749</td>\n      <td>Black Beauty (1994)</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>246</td>\n      <td>Jack (1996)</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>119</td>\n      <td>Family Thing, A (1996)</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>707</td>\n      <td>Rebel Without a Cause (1955)</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>128</td>\n      <td>In the Line of Duty 2 (1987)</td>\n      <td>5</td>\n    </tr>\n  </tbody>\n</table></div></div></div></div><div class=\"sc-bxivhb HLmih cell\" style=\"box-shadow:none\"><div class=\"sc-iwsKbI exQuEV markdown\"><p>We now create a model using <code>collab_learner</code>.</p></div></div><div class=\"sc-bxivhb HLmih cell\" style=\"box-shadow:none\"><div class=\"sc-gzVnrw iiEGBE input-container\"><pre class=\"sc-bZQynM dQAqiJ input\" style=\"color:#393A34;font-family:&quot;Consolas&quot;, &quot;Bitstream Vera Sans Mono&quot;, &quot;Courier New&quot;, Courier, monospace;direction:ltr;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;font-size:.9em;line-height:1.2em;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;padding:10px 0px 10px 10px;margin:0px;overflow:auto;border:none;background-color:var(--cm-background, #fafafa)\"><code class=\"language-python\" style=\"color:#393A34;font-family:&quot;Consolas&quot;, &quot;Bitstream Vera Sans Mono&quot;, &quot;Courier New&quot;, Courier, monospace;direction:ltr;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;font-size:.9em;line-height:1.2em;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none\"><span>learn </span><span class=\"token\" style=\"color:#393A34\">=</span><span> collab_learner</span><span class=\"token\" style=\"color:#393A34\">(</span><span>dls</span><span class=\"token\" style=\"color:#393A34\">,</span><span> n_factors</span><span class=\"token\" style=\"color:#393A34\">=</span><span class=\"token\" style=\"color:#36acaa\">50</span><span class=\"token\" style=\"color:#393A34\">,</span><span> y_range</span><span class=\"token\" style=\"color:#393A34\">=</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#36acaa\">0</span><span class=\"token\" style=\"color:#393A34\">,</span><span> </span><span class=\"token\" style=\"color:#36acaa\">5.5</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">)</span></code></pre></div></div><div class=\"sc-bxivhb HLmih cell\" style=\"box-shadow:none\"><div class=\"sc-iwsKbI exQuEV markdown\"><p>In addition to the dataloaders, we specified the following information in this line:</p>\n<ol>\n<li>A 50-dimensional vector should be used to represent each movie and user.</li>\n<li>The output of the model should be between 0 and 5.5. Although the ratings in our dataset go from 0 to 5, using a slightly higher upper bound seems to work a little better practically, according to Fastbook.</li>\n</ol>\n<p>We now use the <code>fit_one_cycle</code> method to train the model.</p></div></div><div class=\"sc-bxivhb HLmih cell\" style=\"box-shadow:none\"><div class=\"sc-gzVnrw iiEGBE input-container\"><pre class=\"sc-bZQynM dQAqiJ input\" style=\"color:#393A34;font-family:&quot;Consolas&quot;, &quot;Bitstream Vera Sans Mono&quot;, &quot;Courier New&quot;, Courier, monospace;direction:ltr;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;font-size:.9em;line-height:1.2em;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;padding:10px 0px 10px 10px;margin:0px;overflow:auto;border:none;background-color:var(--cm-background, #fafafa)\"><code class=\"language-python\" style=\"color:#393A34;font-family:&quot;Consolas&quot;, &quot;Bitstream Vera Sans Mono&quot;, &quot;Courier New&quot;, Courier, monospace;direction:ltr;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;font-size:.9em;line-height:1.2em;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none\"><span>learn</span><span class=\"token\" style=\"color:#393A34\">.</span><span>fit_one_cycle</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#36acaa\">5</span><span class=\"token\" style=\"color:#393A34\">,</span><span> </span><span class=\"token\" style=\"color:#36acaa\">5e</span><span class=\"token\" style=\"color:#393A34\">-</span><span class=\"token\" style=\"color:#36acaa\">3</span><span class=\"token\" style=\"color:#393A34\">,</span><span> wd</span><span class=\"token\" style=\"color:#393A34\">=</span><span class=\"token\" style=\"color:#36acaa\">0.1</span><span class=\"token\" style=\"color:#393A34\">)</span></code></pre></div><div class=\"sc-htoDjs fWFfJb nteract-outputs\" style=\"max-height:100%\"><div class=\"cell_display\" style=\"max-height:100%;overflow-y:auto\"><div><table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: left;\">\n      <th>epoch</th>\n      <th>train_loss</th>\n      <th>valid_loss</th>\n      <th>time</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>0</td>\n      <td>0.927610</td>\n      <td>0.938143</td>\n      <td>00:07</td>\n    </tr>\n    <tr>\n      <td>1</td>\n      <td>0.859944</td>\n      <td>0.874978</td>\n      <td>00:07</td>\n    </tr>\n    <tr>\n      <td>2</td>\n      <td>0.729279</td>\n      <td>0.834507</td>\n      <td>00:07</td>\n    </tr>\n    <tr>\n      <td>3</td>\n      <td>0.604334</td>\n      <td>0.820646</td>\n      <td>00:07</td>\n    </tr>\n    <tr>\n      <td>4</td>\n      <td>0.485712</td>\n      <td>0.821522</td>\n      <td>00:07</td>\n    </tr>\n  </tbody>\n</table></div></div></div></div><div class=\"sc-bxivhb HLmih cell\" style=\"box-shadow:none\"><div class=\"sc-iwsKbI exQuEV markdown\"><p>We can now <code>export</code> this model so that we can use it to make predictions.</p></div></div><div class=\"sc-bxivhb HLmih cell\" style=\"box-shadow:none\"><div class=\"sc-gzVnrw iiEGBE input-container\"><pre class=\"sc-bZQynM dQAqiJ input\" style=\"color:#393A34;font-family:&quot;Consolas&quot;, &quot;Bitstream Vera Sans Mono&quot;, &quot;Courier New&quot;, Courier, monospace;direction:ltr;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;font-size:.9em;line-height:1.2em;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;padding:10px 0px 10px 10px;margin:0px;overflow:auto;border:none;background-color:var(--cm-background, #fafafa)\"><code class=\"language-python\" style=\"color:#393A34;font-family:&quot;Consolas&quot;, &quot;Bitstream Vera Sans Mono&quot;, &quot;Courier New&quot;, Courier, monospace;direction:ltr;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;font-size:.9em;line-height:1.2em;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none\"><span>learn</span><span class=\"token\" style=\"color:#393A34\">.</span><span>export</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#A31515\">&#x27;movie-recommender.pkl&#x27;</span><span class=\"token\" style=\"color:#393A34\">)</span></code></pre></div></div><div class=\"sc-bxivhb HLmih cell\" style=\"box-shadow:none\"><div class=\"sc-iwsKbI exQuEV markdown\"><p><a href=\"https://github.com/fastai/fastbook/blob/master/08_collab.ipynb\">Chapter 8 of Fastbook</a> is an excellent resource to understand how this model works under the hood and how to build such a model from scratch.</p></div></div><div class=\"sc-bxivhb HLmih cell\" style=\"box-shadow:none\"><div class=\"sc-iwsKbI exQuEV markdown\"><h2>Using deep learning for collaborative filtering</h2>\n<p>The approach that we&#x27;ve considered so far (using the dot product between movie and user vectors to predict a user&#x27;s rating) is also known as <strong>probabilistic matrix factorization (PMF)</strong>.</p>\n<p>Another approach would be to use a neural network. As mentioned previously, when using neural networks the size of the user and movie vectors can be different.</p>\n<p>Fastai provides the <code>get_emb_sz</code> function that uses some heuristics to suggest the length of vectors that can be used.</p></div></div><div class=\"sc-bxivhb HLmih cell\" style=\"box-shadow:none\"><div class=\"sc-gzVnrw iiEGBE input-container\"><pre class=\"sc-bZQynM dQAqiJ input\" style=\"color:#393A34;font-family:&quot;Consolas&quot;, &quot;Bitstream Vera Sans Mono&quot;, &quot;Courier New&quot;, Courier, monospace;direction:ltr;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;font-size:.9em;line-height:1.2em;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;padding:10px 0px 10px 10px;margin:0px;overflow:auto;border:none;background-color:var(--cm-background, #fafafa)\"><code class=\"language-python\" style=\"color:#393A34;font-family:&quot;Consolas&quot;, &quot;Bitstream Vera Sans Mono&quot;, &quot;Courier New&quot;, Courier, monospace;direction:ltr;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;font-size:.9em;line-height:1.2em;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none\"><span>get_emb_sz</span><span class=\"token\" style=\"color:#393A34\">(</span><span>dls</span><span class=\"token\" style=\"color:#393A34\">)</span></code></pre></div><div class=\"sc-htoDjs fWFfJb nteract-outputs\" style=\"max-height:100%\"><div class=\"cell_display\" style=\"max-height:100%;overflow-y:auto\"><pre><code><span>[(944, 74), (1665, 102)]</span></code></pre></div></div></div><div class=\"sc-bxivhb HLmih cell\" style=\"box-shadow:none\"><div class=\"sc-iwsKbI exQuEV markdown\"><p>The recommendation for our dataset is to use:</p>\n<ul>\n<li>A vector of length 74 for each user</li>\n<li>A vector of length 102 for each movie</li>\n</ul>\n<p>The reason these vectors don&#x27;t need to be of the same length is that we concatenate them.</p>\n<p><img src=\"/rec-nn.png\"/></p>\n<p>Using neural networks for collaborative filtering in Fastai is super-easy! We still use <code>collab_learner</code> like before, but we set <code>use_nn=True</code>. We can also specify the size of the <code>layers</code> in the network.</p></div></div><div class=\"sc-bxivhb HLmih cell\" style=\"box-shadow:none\"><div class=\"sc-gzVnrw iiEGBE input-container\"><pre class=\"sc-bZQynM dQAqiJ input\" style=\"color:#393A34;font-family:&quot;Consolas&quot;, &quot;Bitstream Vera Sans Mono&quot;, &quot;Courier New&quot;, Courier, monospace;direction:ltr;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;font-size:.9em;line-height:1.2em;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;padding:10px 0px 10px 10px;margin:0px;overflow:auto;border:none;background-color:var(--cm-background, #fafafa)\"><code class=\"language-python\" style=\"color:#393A34;font-family:&quot;Consolas&quot;, &quot;Bitstream Vera Sans Mono&quot;, &quot;Courier New&quot;, Courier, monospace;direction:ltr;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;font-size:.9em;line-height:1.2em;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none\"><span>learn </span><span class=\"token\" style=\"color:#393A34\">=</span><span> collab_learner</span><span class=\"token\" style=\"color:#393A34\">(</span><span>dls</span><span class=\"token\" style=\"color:#393A34\">,</span><span> use_nn</span><span class=\"token\" style=\"color:#393A34\">=</span><span class=\"token\" style=\"color:#36acaa\">True</span><span class=\"token\" style=\"color:#393A34\">,</span><span> y_range</span><span class=\"token\" style=\"color:#393A34\">=</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#36acaa\">0</span><span class=\"token\" style=\"color:#393A34\">,</span><span> </span><span class=\"token\" style=\"color:#36acaa\">5.5</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">,</span><span> layers</span><span class=\"token\" style=\"color:#393A34\">=</span><span class=\"token\" style=\"color:#393A34\">[</span><span class=\"token\" style=\"color:#36acaa\">100</span><span class=\"token\" style=\"color:#393A34\">,</span><span class=\"token\" style=\"color:#36acaa\">50</span><span class=\"token\" style=\"color:#393A34\">]</span><span class=\"token\" style=\"color:#393A34\">)</span><span>\n</span><span>learn</span><span class=\"token\" style=\"color:#393A34\">.</span><span>fit_one_cycle</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#36acaa\">5</span><span class=\"token\" style=\"color:#393A34\">,</span><span> </span><span class=\"token\" style=\"color:#36acaa\">5e</span><span class=\"token\" style=\"color:#393A34\">-</span><span class=\"token\" style=\"color:#36acaa\">3</span><span class=\"token\" style=\"color:#393A34\">,</span><span> wd</span><span class=\"token\" style=\"color:#393A34\">=</span><span class=\"token\" style=\"color:#36acaa\">0.1</span><span class=\"token\" style=\"color:#393A34\">)</span></code></pre></div><div class=\"sc-htoDjs fWFfJb nteract-outputs\" style=\"max-height:100%\"><div class=\"cell_display\" style=\"max-height:100%;overflow-y:auto\"><div><table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: left;\">\n      <th>epoch</th>\n      <th>train_loss</th>\n      <th>valid_loss</th>\n      <th>time</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>0</td>\n      <td>0.962094</td>\n      <td>0.988195</td>\n      <td>00:11</td>\n    </tr>\n    <tr>\n      <td>1</td>\n      <td>0.931443</td>\n      <td>0.912817</td>\n      <td>00:11</td>\n    </tr>\n    <tr>\n      <td>2</td>\n      <td>0.850018</td>\n      <td>0.879676</td>\n      <td>00:11</td>\n    </tr>\n    <tr>\n      <td>3</td>\n      <td>0.815401</td>\n      <td>0.851548</td>\n      <td>00:11</td>\n    </tr>\n    <tr>\n      <td>4</td>\n      <td>0.769558</td>\n      <td>0.856113</td>\n      <td>00:10</td>\n    </tr>\n  </tbody>\n</table></div></div></div></div><div class=\"sc-bxivhb HLmih cell\" style=\"box-shadow:none\"><div class=\"sc-iwsKbI exQuEV markdown\"><p>This approach allows us to include more information that may be relevant to make predictions (e.g. date and time of rating). All we need to do is concatenate that information to the input vector and train the neural network!</p>\n<p><img src=\"/rec-nn-extra.png\"/></p>\n<h2>Next steps</h2>\n<p>In this post, we covered the following:</p>\n<ul>\n<li>How collaborative filtering works</li>\n<li>How we can use gradient descent to learn user and movie vectors</li>\n<li>How to use fastai to train a movie recommendation model</li>\n<li>How to use neural networks for collaborative filtering</li>\n</ul>\n<p>In the <a href=\"https://ravimashru.dev/blog/2021-08-24-movie-recommender-part-2/\">next post</a>, we&#x27;ll use the model we&#x27;ve trained to recommend movies to new users.</p></div></div></div></div>","json":{"metadata":{"title":"Building a Movie Recommender - Part 1","date":"2021-08-22"}}}},"pageContext":{"id":"1123c531-285e-5b16-b026-56f7c336d37f >>> JupyterNotebook"}},"staticQueryHashes":["3069025275","63159454"]}