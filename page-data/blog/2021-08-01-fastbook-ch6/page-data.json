{"componentChunkName":"component---src-components-blog-layout-js","path":"/blog/2021-08-01-fastbook-ch6/","result":{"data":{"mdx":{"id":"c05ae20a-d83a-52d3-92ea-a39db72c5e89","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Reading Notes - Ch. 6 - Fastbook\",\n  \"date\": \"2021-08-01T00:00:00.000Z\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"Multi-label Classification\"), mdx(\"p\", null, \"When a classifier is being used in practice, it may encounter images that don't have any of the classes it was trained to classify. On the other hand, a single image may have multiple classes in it.\"), mdx(\"p\", null, \"Multi-label classifiers are capable of classifying images that may not contain exactly one type of object. There may be no objects at all or even multiple objects.\"), mdx(\"h2\", null, \"Binary Cross Entropy\"), mdx(\"p\", null, \"The \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://ravimashru.dev/blog/2021-07-18-understanding-cross-entropy-loss/\"\n  }), \"cross-entropy loss function\"), \" can be used to train a model to classify an image into \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"one\"), \" of several classes. It is not suitable for multi-label classification because:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"It tries to push one activation much ahead of others (due to the softmax function).\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"It uses the negative log-likelihood which returns the loss value of just one activation.\")), mdx(\"p\", null, \"The binary cross-entropy loss function allows for training a model that can classify an image into several classes. In essence, we treat each model output as an independent binary classifier that predicts whether a class is present in the image or not.\"), mdx(\"p\", null, \"Let's assume that we want to build a model that can identify the following objects in an image:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Pen\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Pencil\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Eraser\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Book\")), mdx(\"p\", null, \"The model we build for this will have four outputs - one for each possible class.\"), mdx(Image, {\n    name: \"multi-output-model.png\",\n    mdxType: \"Image\"\n  }), mdx(\"p\", null, \"Consider the image below that has the objects \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"pen\"), \" and \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"book\"), \".\"), mdx(Image, {\n    name: \"pen-book.png\",\n    mdxType: \"Image\"\n  }), mdx(\"p\", null, \"Let's assume the model's outputs are the following for this image:\"), mdx(Image, {\n    name: \"bce-model-outputs.png\",\n    mdxType: \"Image\"\n  }), mdx(\"p\", null, \"When using binary cross entropy, instead of using the softmax function which favors a single output over others, the model outputs are individually passed through a sigmoid activation function which squishes them between 0 and 1.\"), mdx(Image, {\n    name: \"bce-sigmoid.png\",\n    mdxType: \"Image\"\n  }), mdx(\"p\", null, \"We now need to push the outputs of the correct classes to 1 and the other outputs to 0.\"), mdx(\"p\", null, \"We can replace the values corresponding to classes that don't exist in the image with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"1 - value\"), \", so that we just have to focus on bringing all values as close to 1 as possible.\"), mdx(Image, {\n    name: \"bce-flip.png\",\n    mdxType: \"Image\"\n  }), mdx(\"p\", null, \"Just like in \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://ravimashru.dev/blog/2021-07-18-understanding-cross-entropy-loss/\"\n  }), \"cross-entropy loss\"), \", we take a log of the values to amplify small differences in values and then drop the negative sign (or equivalently, multiply by -1) so that the loss value is maximum when the value we calculated is close to 0. Conversely, the loss value is close to 0 when the value we calculated is close to 1.\"), mdx(Image, {\n    name: \"bce-log.png\",\n    mdxType: \"Image\"\n  }), mdx(\"p\", null, \"PyTorch provides two versions of the binary cross-entropy loss function that can be used:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"BCELoss\"), \" / \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"F.binary_cross_entropy\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"BCEWithLogitsLoss\"), \" / \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"F.binary_cross_entropy_with_logits\"))), mdx(\"p\", null, \"The first assumes that you have passed the values you are feeding it through a sigmoid activation already. The second passes the values through a sigmoid before calculating the binary cross-entropy.\"), mdx(Image, {\n    name: \"bce-pytorch-options.png\",\n    mdxType: \"Image\"\n  }), mdx(\"h2\", null, \"Calculating performance\"), mdx(\"p\", null, \"Since there isn't just one correct class, we can't just pick the output with the highest value as the model's prediction. Instead, we need to pick a \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"threshold\"), \" beyond which we'll consider the model output (after passing through a sigmoid activation) as 1, and values below this threshold will be considered 0.\"), mdx(\"p\", null, \"If the threshold is too low, the model may pick incorrect classes. However, if the threshold is too high, the model will only pick classes for which it is very confident.\"), mdx(\"p\", null, \"A good way to find the threshold is getting the raw model outputs (passed through sigmoid activation) and plot accuracy against different threshold values. We can then pick the threshold at which the accuracy is maximum.\"), mdx(Image, {\n    name: \"bce-choose-threshold.png\",\n    mdxType: \"Image\"\n  }), mdx(\"h2\", null, \"Regression\"), mdx(\"p\", null, \"In a regression problem, the value we are trying to predict is one or more floats (continuous numeric value), for example: the center of a person's face in an image which is given by two values: the row and the column of the center of the face.\"), mdx(\"p\", null, \"A loss function that can be used in regression problems is the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"MSELoss\"), \" - mean squared error loss.\"));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Reading Notes - Ch. 6 - Fastbook"}}},"pageContext":{"id":"c05ae20a-d83a-52d3-92ea-a39db72c5e89"}},"staticQueryHashes":["3069025275","63159454"]}