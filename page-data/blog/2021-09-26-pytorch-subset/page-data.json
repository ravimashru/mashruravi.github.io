{"componentChunkName":"component---src-components-jupyter-blog-layout-js","path":"/blog/2021-09-26-pytorch-subset/","result":{"data":{"jupyterNotebook":{"id":"bb9805f8-17bd-5d4a-8e04-8f6cad4328c5 >>> JupyterNotebook","html":"<div class=\"notebook-render\"><div class=\"sc-ifAKCX zMCZx\"><div class=\"sc-bxivhb HLmih cell\" style=\"box-shadow:none\"><div class=\"sc-iwsKbI exQuEV markdown\"><h1>Using a Subset of data in PyTorch</h1>\n<p>When training deep learning models, you&#x27;ll often want to try out new ideas and see what effect it has on your model.</p>\n<p>It becomes very important to have a very high iteration speed. The faster you can train a model, the faster you can test different ideas and see how they impact the performance of the model.</p>\n<blockquote>\n<p>The more experiments you can do, the better!<br/>\n-- Deep Learning for Coders with fastai &amp; PyTorch</p>\n</blockquote>\n<p>If your model takes too long to train, you can reduce the training time by either using a simpler model, or by using a smaller dataset.</p>\n<p>One way to reduce the size of a dataset is to use only a subset of the classes it contains. The <a href=\"https://github.com/fastai/imagenette\">Imagenette</a> dataset is an example of this. It contains a subset of 10 classes from the larger <a href=\"https://www.image-net.org/\">ImageNet</a> dataset. Because it&#x27;s smaller in size, it allows anyone to train state-of-the-art image classification models even if they don&#x27;t have access to state-of-the-art computing resources, in a short period of time.</p>\n<p>In this short post, we&#x27;ll learn how to use the <code>Subset</code> class in PyTorch to use a small part of a larger dataset for training models quickly.</p>\n<p>The method we will learn applies to any instance of a PyTorch dataset. For simplicity, let us assume we are interested in using the CIFAR10 dataset.</p></div></div><div class=\"sc-bxivhb HLmih cell\" style=\"box-shadow:none\"><div class=\"sc-gzVnrw iiEGBE input-container\"><pre class=\"sc-bZQynM dQAqiJ input\" style=\"color:#393A34;font-family:&quot;Consolas&quot;, &quot;Bitstream Vera Sans Mono&quot;, &quot;Courier New&quot;, Courier, monospace;direction:ltr;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;font-size:.9em;line-height:1.2em;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;padding:10px 0px 10px 10px;margin:0px;overflow:auto;border:none;background-color:var(--cm-background, #fafafa)\"><code class=\"language-python\" style=\"color:#393A34;font-family:&quot;Consolas&quot;, &quot;Bitstream Vera Sans Mono&quot;, &quot;Courier New&quot;, Courier, monospace;direction:ltr;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;font-size:.9em;line-height:1.2em;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none\"><span class=\"token\" style=\"color:#008000;font-style:italic\"># import the required modules</span><span>\n</span><span></span><span class=\"token\" style=\"color:#0000ff\">import</span><span> torch\n</span><span></span><span class=\"token\" style=\"color:#0000ff\">from</span><span> torchvision</span><span class=\"token\" style=\"color:#393A34\">.</span><span>datasets </span><span class=\"token\" style=\"color:#0000ff\">import</span><span> CIFAR10\n</span><span></span><span class=\"token\" style=\"color:#0000ff\">from</span><span> torchvision </span><span class=\"token\" style=\"color:#0000ff\">import</span><span> transforms\n</span>\n<span></span><span class=\"token\" style=\"color:#008000;font-style:italic\"># No fancy transforms, we just convert the image to a tensor</span><span>\n</span><span>transform </span><span class=\"token\" style=\"color:#393A34\">=</span><span> transforms</span><span class=\"token\" style=\"color:#393A34\">.</span><span>ToTensor</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#393A34\">)</span><span>\n</span>\n<span></span><span class=\"token\" style=\"color:#008000;font-style:italic\"># create training dataset</span><span>\n</span><span>trainset </span><span class=\"token\" style=\"color:#393A34\">=</span><span> CIFAR10</span><span class=\"token\" style=\"color:#393A34\">(</span><span>root</span><span class=\"token\" style=\"color:#393A34\">=</span><span class=\"token\" style=\"color:#A31515\">&#x27;./data&#x27;</span><span class=\"token\" style=\"color:#393A34\">,</span><span> train</span><span class=\"token\" style=\"color:#393A34\">=</span><span class=\"token\" style=\"color:#36acaa\">True</span><span class=\"token\" style=\"color:#393A34\">,</span><span> download</span><span class=\"token\" style=\"color:#393A34\">=</span><span class=\"token\" style=\"color:#36acaa\">True</span><span class=\"token\" style=\"color:#393A34\">,</span><span> transform</span><span class=\"token\" style=\"color:#393A34\">=</span><span>transform</span><span class=\"token\" style=\"color:#393A34\">)</span></code></pre></div></div><div class=\"sc-bxivhb HLmih cell\" style=\"box-shadow:none\"><div class=\"sc-iwsKbI exQuEV markdown\"><p>Let us assume that we want to create a subset with just two classes from this complete dataset: 1 and 8.</p>\n<p>The first thing we would need to do is get the index of all samples in this dataset that have classes 1 and 8.</p></div></div><div class=\"sc-bxivhb HLmih cell\" style=\"box-shadow:none\"><div class=\"sc-gzVnrw iiEGBE input-container\"><pre class=\"sc-bZQynM dQAqiJ input\" style=\"color:#393A34;font-family:&quot;Consolas&quot;, &quot;Bitstream Vera Sans Mono&quot;, &quot;Courier New&quot;, Courier, monospace;direction:ltr;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;font-size:.9em;line-height:1.2em;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;padding:10px 0px 10px 10px;margin:0px;overflow:auto;border:none;background-color:var(--cm-background, #fafafa)\"><code class=\"language-python\" style=\"color:#393A34;font-family:&quot;Consolas&quot;, &quot;Bitstream Vera Sans Mono&quot;, &quot;Courier New&quot;, Courier, monospace;direction:ltr;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;font-size:.9em;line-height:1.2em;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none\"><span class=\"token\" style=\"color:#008000;font-style:italic\"># We create a tensor that has `True` at an index if the sample belongs to class 1</span><span>\n</span><span>idx1 </span><span class=\"token\" style=\"color:#393A34\">=</span><span> torch</span><span class=\"token\" style=\"color:#393A34\">.</span><span>tensor</span><span class=\"token\" style=\"color:#393A34\">(</span><span>trainset</span><span class=\"token\" style=\"color:#393A34\">.</span><span>targets</span><span class=\"token\" style=\"color:#393A34\">)</span><span> </span><span class=\"token\" style=\"color:#393A34\">==</span><span> </span><span class=\"token\" style=\"color:#36acaa\">1</span><span>\n</span>\n<span></span><span class=\"token\" style=\"color:#008000;font-style:italic\"># Similarly, this tensor has `True` at an index if the sample belongs to class 8</span><span>\n</span><span>idx8 </span><span class=\"token\" style=\"color:#393A34\">=</span><span> torch</span><span class=\"token\" style=\"color:#393A34\">.</span><span>tensor</span><span class=\"token\" style=\"color:#393A34\">(</span><span>trainset</span><span class=\"token\" style=\"color:#393A34\">.</span><span>targets</span><span class=\"token\" style=\"color:#393A34\">)</span><span> </span><span class=\"token\" style=\"color:#393A34\">==</span><span> </span><span class=\"token\" style=\"color:#36acaa\">8</span></code></pre></div></div><div class=\"sc-bxivhb HLmih cell\" style=\"box-shadow:none\"><div class=\"sc-iwsKbI exQuEV markdown\"><p>We then merge these two so that we have one Boolean tensor that has <code>True</code> at the index where the sample is of class 1 or 8, and <code>False</code> otherwise.</p></div></div><div class=\"sc-bxivhb HLmih cell\" style=\"box-shadow:none\"><div class=\"sc-gzVnrw iiEGBE input-container\"><pre class=\"sc-bZQynM dQAqiJ input\" style=\"color:#393A34;font-family:&quot;Consolas&quot;, &quot;Bitstream Vera Sans Mono&quot;, &quot;Courier New&quot;, Courier, monospace;direction:ltr;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;font-size:.9em;line-height:1.2em;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;padding:10px 0px 10px 10px;margin:0px;overflow:auto;border:none;background-color:var(--cm-background, #fafafa)\"><code class=\"language-python\" style=\"color:#393A34;font-family:&quot;Consolas&quot;, &quot;Bitstream Vera Sans Mono&quot;, &quot;Courier New&quot;, Courier, monospace;direction:ltr;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;font-size:.9em;line-height:1.2em;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none\"><span>train_mask </span><span class=\"token\" style=\"color:#393A34\">=</span><span> idx1 </span><span class=\"token\" style=\"color:#393A34\">|</span><span> idx8\n</span>train_mask\n</code></pre></div><div class=\"sc-htoDjs fWFfJb nteract-outputs\" style=\"max-height:100%\"><div class=\"cell_display\" style=\"max-height:100%;overflow-y:auto\"><pre><code><span>tensor([False, False, False,  ..., False,  True,  True])</span></code></pre></div></div></div><div class=\"sc-bxivhb HLmih cell\" style=\"box-shadow:none\"><div class=\"sc-iwsKbI exQuEV markdown\"><p>We used the <a href=\"https://pytorch.org/docs/stable/generated/torch.bitwise_or.html\">bitwise OR</a> operator here. </p>\n<p>In a nutshell, this operator gives us an output of <code>False</code> at a particular index if items in <code>idx1</code> and <code>idx8</code> at that index are BOTH <code>False</code>.</p>\n<p>If either <code>idx1</code> or <code>idx8</code> have <code>True</code> at that index (which means the sample at that index is of either class 1 or class 8), then the tensor will have a value of <code>True</code> at that index.</p>\n<p><img src=\"/torch_or.png\"/></p>\n<p>We then need to convert this into a list of indices at which we have <code>True</code>.</p>\n<p><img src=\"/torch_nonzero.png\"/></p>\n<p>We can do this using the <a href=\"https://pytorch.org/docs/stable/generated/torch.nonzero.html\">nonzero</a> method in PyTorch.</p></div></div><div class=\"sc-bxivhb HLmih cell\" style=\"box-shadow:none\"><div class=\"sc-gzVnrw iiEGBE input-container\"><pre class=\"sc-bZQynM dQAqiJ input\" style=\"color:#393A34;font-family:&quot;Consolas&quot;, &quot;Bitstream Vera Sans Mono&quot;, &quot;Courier New&quot;, Courier, monospace;direction:ltr;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;font-size:.9em;line-height:1.2em;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;padding:10px 0px 10px 10px;margin:0px;overflow:auto;border:none;background-color:var(--cm-background, #fafafa)\"><code class=\"language-python\" style=\"color:#393A34;font-family:&quot;Consolas&quot;, &quot;Bitstream Vera Sans Mono&quot;, &quot;Courier New&quot;, Courier, monospace;direction:ltr;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;font-size:.9em;line-height:1.2em;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none\"><span>train_indices </span><span class=\"token\" style=\"color:#393A34\">=</span><span> train_mask</span><span class=\"token\" style=\"color:#393A34\">.</span><span>nonzero</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">.</span><span>reshape</span><span class=\"token\" style=\"color:#393A34\">(</span><span class=\"token\" style=\"color:#393A34\">-</span><span class=\"token\" style=\"color:#36acaa\">1</span><span class=\"token\" style=\"color:#393A34\">)</span><span>\n</span>train_indices\n</code></pre></div><div class=\"sc-htoDjs fWFfJb nteract-outputs\" style=\"max-height:100%\"><div class=\"cell_display\" style=\"max-height:100%;overflow-y:auto\"><pre><code><span>tensor([    4,     5,     8,  ..., 49993, 49998, 49999])</span></code></pre></div></div></div><div class=\"sc-bxivhb HLmih cell\" style=\"box-shadow:none\"><div class=\"sc-iwsKbI exQuEV markdown\"><p>We can then create a subset by specifying these indices as follows:</p></div></div><div class=\"sc-bxivhb HLmih cell\" style=\"box-shadow:none\"><div class=\"sc-gzVnrw iiEGBE input-container\"><pre class=\"sc-bZQynM dQAqiJ input\" style=\"color:#393A34;font-family:&quot;Consolas&quot;, &quot;Bitstream Vera Sans Mono&quot;, &quot;Courier New&quot;, Courier, monospace;direction:ltr;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;font-size:.9em;line-height:1.2em;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;padding:10px 0px 10px 10px;margin:0px;overflow:auto;border:none;background-color:var(--cm-background, #fafafa)\"><code class=\"language-python\" style=\"color:#393A34;font-family:&quot;Consolas&quot;, &quot;Bitstream Vera Sans Mono&quot;, &quot;Courier New&quot;, Courier, monospace;direction:ltr;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;font-size:.9em;line-height:1.2em;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none\"><span class=\"token\" style=\"color:#008000;font-style:italic\"># First, we import the `Subset` class</span><span>\n</span><span></span><span class=\"token\" style=\"color:#0000ff\">from</span><span> torch</span><span class=\"token\" style=\"color:#393A34\">.</span><span>utils</span><span class=\"token\" style=\"color:#393A34\">.</span><span>data </span><span class=\"token\" style=\"color:#0000ff\">import</span><span> Subset\n</span>\n<span></span><span class=\"token\" style=\"color:#008000;font-style:italic\"># We then pass the original dataset and the indices we are interested in</span><span>\n</span><span>train_subset </span><span class=\"token\" style=\"color:#393A34\">=</span><span> Subset</span><span class=\"token\" style=\"color:#393A34\">(</span><span>trainset</span><span class=\"token\" style=\"color:#393A34\">,</span><span> train_indices</span><span class=\"token\" style=\"color:#393A34\">)</span></code></pre></div></div><div class=\"sc-bxivhb HLmih cell\" style=\"box-shadow:none\"><div class=\"sc-iwsKbI exQuEV markdown\"><p>The subset will now only pick samples from the underlying dataset at the indices which have a value of <code>True</code> in the <code>train_indices</code> that we passed.</p>\n<p>We can then use <code>train_subset</code> like any other dataset in PyTorch.</p>\n<p>Let us create a <code>DataLoader</code> with the subset and verify it fetches only samples of the classes we have specified. </p></div></div><div class=\"sc-bxivhb HLmih cell\" style=\"box-shadow:none\"><div class=\"sc-gzVnrw iiEGBE input-container\"><pre class=\"sc-bZQynM dQAqiJ input\" style=\"color:#393A34;font-family:&quot;Consolas&quot;, &quot;Bitstream Vera Sans Mono&quot;, &quot;Courier New&quot;, Courier, monospace;direction:ltr;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;font-size:.9em;line-height:1.2em;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;padding:10px 0px 10px 10px;margin:0px;overflow:auto;border:none;background-color:var(--cm-background, #fafafa)\"><code class=\"language-python\" style=\"color:#393A34;font-family:&quot;Consolas&quot;, &quot;Bitstream Vera Sans Mono&quot;, &quot;Courier New&quot;, Courier, monospace;direction:ltr;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;font-size:.9em;line-height:1.2em;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none\"><span class=\"token\" style=\"color:#008000;font-style:italic\"># import the DataLoader class</span><span>\n</span><span></span><span class=\"token\" style=\"color:#0000ff\">from</span><span> torch</span><span class=\"token\" style=\"color:#393A34\">.</span><span>utils</span><span class=\"token\" style=\"color:#393A34\">.</span><span>data </span><span class=\"token\" style=\"color:#0000ff\">import</span><span> DataLoader\n</span>\n<span></span><span class=\"token\" style=\"color:#008000;font-style:italic\"># Create a dataloader from the subset as usual</span><span>\n</span><span>train_dataloader </span><span class=\"token\" style=\"color:#393A34\">=</span><span> DataLoader</span><span class=\"token\" style=\"color:#393A34\">(</span><span>train_subset</span><span class=\"token\" style=\"color:#393A34\">,</span><span> shuffle</span><span class=\"token\" style=\"color:#393A34\">=</span><span class=\"token\" style=\"color:#36acaa\">False</span><span class=\"token\" style=\"color:#393A34\">,</span><span> batch_size</span><span class=\"token\" style=\"color:#393A34\">=</span><span class=\"token\" style=\"color:#36acaa\">8</span><span class=\"token\" style=\"color:#393A34\">)</span></code></pre></div></div><div class=\"sc-bxivhb HLmih cell\" style=\"box-shadow:none\"><div class=\"sc-iwsKbI exQuEV markdown\"><p>Let us now fetch a few batches from the dataloader and verify that the targets are from only classes 1 and 8.</p></div></div><div class=\"sc-bxivhb HLmih cell\" style=\"box-shadow:none\"><div class=\"sc-gzVnrw iiEGBE input-container\"><pre class=\"sc-bZQynM dQAqiJ input\" style=\"color:#393A34;font-family:&quot;Consolas&quot;, &quot;Bitstream Vera Sans Mono&quot;, &quot;Courier New&quot;, Courier, monospace;direction:ltr;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;font-size:.9em;line-height:1.2em;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;padding:10px 0px 10px 10px;margin:0px;overflow:auto;border:none;background-color:var(--cm-background, #fafafa)\"><code class=\"language-python\" style=\"color:#393A34;font-family:&quot;Consolas&quot;, &quot;Bitstream Vera Sans Mono&quot;, &quot;Courier New&quot;, Courier, monospace;direction:ltr;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;font-size:.9em;line-height:1.2em;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none\"><span class=\"token\" style=\"color:#0000ff\">for</span><span> i</span><span class=\"token\" style=\"color:#393A34\">,</span><span> </span><span class=\"token\" style=\"color:#393A34\">(</span><span>_</span><span class=\"token\" style=\"color:#393A34\">,</span><span> targets</span><span class=\"token\" style=\"color:#393A34\">)</span><span> </span><span class=\"token\" style=\"color:#0000ff\">in</span><span> </span><span class=\"token builtin\">enumerate</span><span class=\"token\" style=\"color:#393A34\">(</span><span>train_dataloader</span><span class=\"token\" style=\"color:#393A34\">)</span><span class=\"token\" style=\"color:#393A34\">:</span><span>\n</span><span>    </span><span class=\"token\" style=\"color:#0000ff\">print</span><span class=\"token\" style=\"color:#393A34\">(</span><span>targets</span><span class=\"token\" style=\"color:#393A34\">)</span><span>\n</span>    \n<span>    </span><span class=\"token\" style=\"color:#0000ff\">if</span><span> i </span><span class=\"token\" style=\"color:#393A34\">==</span><span> </span><span class=\"token\" style=\"color:#36acaa\">3</span><span class=\"token\" style=\"color:#393A34\">:</span><span> </span><span class=\"token\" style=\"color:#0000ff\">break</span></code></pre></div><div class=\"sc-htoDjs fWFfJb nteract-outputs\" style=\"max-height:100%\"><div class=\"cell_display\" style=\"max-height:100%;overflow-y:auto\"><code class=\"nteract-display-area-stdout\"><span>tensor([1, 1, 8, 1, 1, 1, 1, 1])\ntensor([1, 8, 1, 1, 8, 1, 1, 8])\ntensor([1, 1, 1, 1, 8, 1, 8, 8])\ntensor([1, 1, 1, 1, 8, 1, 1, 8])\n</span></code></div></div></div><div class=\"sc-bxivhb HLmih cell\" style=\"box-shadow:none\"><div class=\"sc-iwsKbI exQuEV markdown\"><p>Et voilà! We now have a dataloader that gives us only samples from the classes we want.</p></div></div></div></div>","json":{"metadata":{"title":"Using a Subset of data in PyTorch","date":"2021-09-26"}}}},"pageContext":{"id":"bb9805f8-17bd-5d4a-8e04-8f6cad4328c5 >>> JupyterNotebook"}},"staticQueryHashes":["3069025275","63159454"]}