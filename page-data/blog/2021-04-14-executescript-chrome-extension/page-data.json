{"componentChunkName":"component---src-components-blog-layout-js","path":"/blog/2021-04-14-executescript-chrome-extension/","result":{"data":{"mdx":{"id":"093a51fd-6eff-5a9f-bf8e-48f127b91a13","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Changes in the `executeScript` method for Chrome extensions\",\n  \"date\": \"2021-04-14T00:00:00.000Z\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"My team does virtual sprint retrospectives on\\xA0\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://easyretro.io/\"\n  }), \"EasyRetro\"), \"\\xA0and I created a\\xA0\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://chrome.google.com/webstore/detail/easyretro-to-excel-conver/neoomajkccfdhhbffeobjiflainanfgh\"\n  }), \"Chrome extension\"), \"\\xA0to download everything we write into a spreadsheet.\"), mdx(\"p\", null, \"A few weeks back, the extension stopped working with the error\\xA0\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"chrome.tabs.executeScript\\xA0is not a function\"), \". Unfortunately, I couldn't figure out why a function that was working perfectly well suddenly stopped working. So I downgraded the extension to use \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://developer.chrome.com/docs/extensions/mv2/\"\n  }), \"manifest v2\"), \" from \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://developer.chrome.com/docs/extensions/mv3/intro/\"\n  }), \"manifest v3\"), \" which was still working fine.\"), mdx(\"p\", null, \"Today, I decided to look into the issue again and found\\xA0\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://stackoverflow.com/a/66550386/5774633\"\n  }), \"this\"), \"\\xA0answer on StackOverflow:\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"The\\xA0\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"executeScript\"), \"\\xA0method in ManifestV3 has changed and is now in\\xA0\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"chrome.scripting\"), \"\\xA0API:\\xA0\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://developer.chrome.com/docs/extensions/reference/scripting/\"\n  }), \"https://developer.chrome.com/docs/extensions/reference/scripting/\"), \"Add this line in manifest.json:\"), mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\\"permissions\\\": [\\\"scripting\\\"]\"), \" \"), mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"background.js\"), mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"chrome.scripting.executeScript({\\n   target: {tabId: id, allFrames: true},\\n   files: ['content_scripts/cscript.js'],\\n});\"))), mdx(\"p\", null, \"All the required information is also available in the\\xA0\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://developer.chrome.com/docs/extensions/reference/scripting/\"\n  }), \"official API reference for\\xA0\", mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"chrome.scripting\")), \".\"), mdx(\"h1\", null, \"Changes in API\"), mdx(\"p\", null, \"The change wasn't as simple as just adding the extra permission in the manifest and replacing \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"chrome.tabs\"), \" with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"chrome.scripting\"), \". There were a few more minor adjustments that had to be made in the code.\"), mdx(\"h2\", null, \"Change in parameters\"), mdx(\"p\", null, \"This change was relatively simple. The previous method took three arguments: the tab ID, the code/file to execute and a callback that would be called with the results. The new method took only two arguments: the first was an object that contained the tab ID and the code/file to execute and the second was a callback function that would be called with the results.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Before\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"chrome.tabs.executeScript(tabId, { code: `...` }, (res) => { ... });\\n\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"After\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"chrome.scripting.executeScript(\\n    {\\n        target: { tabId: ... },\\n        function: ...\\n    },\\n    (res) => { ... )\\n);\\n\")), mdx(\"h2\", null, \"No strings allowed\"), mdx(\"p\", null, \"With \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"chrome.tabs.executeScript\"), \" it was possible to execute a string on JavaScript, and this is exactly what I was doing - passing the code I wanted to execute on the page as a string.\"), mdx(\"p\", null, \"In \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"chrome.scripting.executeScript\"), \" you can only pass a function or the name of a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".js\"), \" with the code you want to execute.\"), mdx(\"p\", null, \"Since the code I wanted to execute on the web page was already in the form of a function in a multiline string, I found it easier to convert the string to an actual function and pass it to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"executeScript\"), \" method.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Before\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"chrome.tabs.executeScript(tabId, { code: `...` }, (res) => { ... });\\n\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"After\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"const functionToExecute = () => { ... };\\n\\nchrome.scripting.executeScript(\\n    {\\n        target: { tabId: ... },\\n        function: functionToExecute\\n    },\\n    (res) => { ... )\\n);\\n\")), mdx(\"h2\", null, \"Returning data from contentscript\"), mdx(\"p\", null, \"When passing a string with JavaScript code to execute on the page, the last statement in the string would be the name of the variable that you would like to return.\"), mdx(\"p\", null, \"With the new method, since we pass an actual function or a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".js\"), \" file, we have to explicitly use a return statement to send a value to the callback.\"), mdx(\"p\", null, \"Also, the callback now contains an array of objects with the result in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"result\"), \" property of each object.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Before\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"chrome.tabs.executeScript(\\n    tabId,\\n    { code: `const a = 2 * 4; a` },\\n    (res) => { /* res contains array with value '8' */ }\\n);\\n\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"After\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"const functionToExecute = () => {\\n    const a = 2 * 4;\\n    return a;\\n};\\n\\nchrome.scripting.executeScript(\\n    {\\n        target: { tabId: ... },\\n        function: functionToExecute\\n    },\\n    (res) => { /* res contains array with value { result: 8 } */ )\\n);\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Changes in the `executeScript` method for Chrome extensions"}}},"pageContext":{"id":"093a51fd-6eff-5a9f-bf8e-48f127b91a13"}},"staticQueryHashes":["3069025275","63159454"]}